name: Windows Release

on:
  push:
    branches:
      - 'main'
      - 'continuous-integration'
    tags:
      - 'v*'
  pull_request:
    branches:
    - 'main'
    - 'continuous-integration'

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   6.2.3
  ARTIFACT:     wordle-build.zip

jobs:
  build:
    runs-on:  windows-2019

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get all tags for correct version determination
        working-directory:  ${{ github.workspace }}
        run: |
          git fetch --all --tags -f
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version:      ${{ env.QT_VERSION }}
          host:         windows
          target:       desktop
          arch:         win64_mingw
          dir:          ${{ runner.temp }}
          #modules:      qtcharts qt3d
          setup-python: false
              
      - name: Check mingw g++ version before install
        run: |
          g++.exe --version
      
      - name: Install correct version of mingw
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install mingw --version=11.2.0  -y
       
      - name: Check mingw g++ version after install
        run: |
          g++.exe --version
       
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.24.x'
          
      - name: Use cmake
        run: cmake --version
              
      - name: Create build directory
        run:  mkdir ${{ runner.temp }}\build
        
      - name: Configure CMake
        run: cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -B ${{runner.temp}}\build

      - name: Build
        run: cmake --build ${{runner.temp}}\build

      - name: Deployment
        run: windeployqt --release --qmldir ${{ env.SOURCE_DIR }} ${{runner.temp}}\build\Wordle_Try1.exe
        
      - name: Zip build
        working-directory: ${{ runner.temp }}
        run:  |
              7z a ${{ env.ARTIFACT }} ${{ runner.temp }}\build\* -r
              
      - name: Save build artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}\${{ env.ARTIFACT }}
